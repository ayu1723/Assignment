# -*- coding: utf-8 -*-
"""7 February Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vnbEmeApQ6shHYmxOsMKols_5AxKKN8e
"""

import re

def check_password(pw):
    if len(pw)!=10:
      return "Invalid"

    upper_count= sum(1 for char in pw if char.isupper())
    lower_count= sum(1 for char in pw if char.islower())
    digit_count= sum(1 for char in pw if char.isdigit())
    special_char_count= sum(1 for char in pw if re.match(r'[`.,/;\[\]\\=\-~!@#\$%\^&\*\(\)_+\{\}\|:"<>\?]',char))

    if upper_count>=2 and lower_count>=2 and digit_count>=1 and special_char_count>=3:
      return "Valid"
    else:
      return "Invalid"

#Test cases
pw1='abcDE@#$12'
pw2='abcDEF124*@!'
print(check_password(pw1))
print(check_password(pw2))

#Check if the string starts with a particular letter using list comprehension function in python
fruits = ["apple", "banana", "cherry", "avocado", "blueberry"]
letter=input("input letter to check")

desired_letter= [s.startswith(letter) for s in fruits]

print(desired_letter)

#Check if the string is numeric using list comprehension
l=['111','abc','x12','1723']
x=[i.isnumeric() for i in l]
print(x)

#Check if a given number is even using list comprehension
n=int(input("enter the number you want: "))
x=lambda s: s%2 == 0
print(list(filter(x,[n])))

#Find the squares of numbers from 1 to 10 using lambda function
l=range(1,11)
x= map(lambda s:s*s,l)
print(list(x))

#Find the cube root of numbers from 1 to 10 using lambda function
l=range(1,11)
x= map(lambda s:s**(1/3),l)
print(list(x))

#Filter odd numbers from the given list. [1,2,3,4,5,6,7,8,9,10] using lambda function
l=[1,2,3,4,5,6,7,8,9,10]
x=lambda s: s%2 != 0
print(list(filter(x,l)))

#Sort a list of integers into positive and negative integers lists. [1,2,3,4,5,6,-1,-2,-3,-4,-5,0] using list comprehension
l=[1,2,3,4,5,6,-1,-2,-3,-4,-5,0]
pos=[x for x in l if x>0]
neg=[x for x in l if x<0]
zero=[x for x in l if x==0]
print(' positive numbers:',pos,'\n negative numbers:',neg,'\n zero:',zero)

#Sort a list of tuples having fruit names and their quantity. [("mango",99),("orange",80), ("grapes", 1000)] using lambda function
fruits = [("mango", 99), ("orange", 80), ("grapes", 1000)]
sorted_fruits = sorted(fruits, key=lambda x: x[1])
print(sorted_fruits)

