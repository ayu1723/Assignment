# -*- coding: utf-8 -*-
"""10 february.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W90Q_ya626rRHB03I_nXBeNw9F9UHicG
"""

'''1.
In most programming languages, including Python, the function used to open a file is typically called open(). The open() function is used to establish a connection between your program and a file on your computer's storage. It allows you to perform various operations on the file, such as reading, writing, or appending data.
The open() function takes two main arguments:
File Name/Path: This argument specifies the name or path of the file you want to open. You can provide either the file's name (if it's in the same directory as your script) or the full path to the file.
Mode: The mode argument defines how you intend to interact with the file. There are several modes, each serving a different purpose:
'r' (Read Mode): This mode is used for reading the contents of a file. You can only read from the file; attempting to write to it will result in an error.
'w' (Write Mode): This mode is used for writing data to a file. If the file already exists, it will be truncated (emptied) before writing. If the file does not exist, a new empty file will be created.
'a' (Append Mode): This mode is used for appending data to an existing file. If the file does not exist, a new file will be created. Data is added at the end of the file without truncating the existing content.
'x' (Exclusive Creation Mode): This mode is used for exclusive file creation. It will create a new file but will raise an error if the file already exists with the same name.
'b' (Binary Mode): This mode is used in conjunction with other modes to work with binary files (e.g., 'rb' for reading binary, 'wb' for writing binary). It's used to indicate that you're working with binary data, such as images or non-text files.
't' (Text Mode, default): This mode is used in conjunction with other modes to work with text files (e.g., 'rt' for reading text, 'wt' for writing text). It's used to indicate that you're working with plain text data.
'''

'''2.
It's important to note that when working with files, you should always close them using the close() method or use a with statement to ensure that the file is properly closed when you're done with it.
This helps avoid resource leaks and potential data corruption.
'''

#3.
f=open('aspiration.txt','w')
print("i want to become a Data Scientist")
f.close()
with open('aspiration.txt','r') as f:
  data=f.read()

'''4.
read() reads the entire content as a single string or bytes.
readline() reads one line at a time.
readlines() reads all lines and returns them as a list.

Examples:
'''
f=open('aspiration.txt','w')
print("i want to become a Data Scientist")
f.close()
with open('aspiration.txt','r') as f:
  data=f.read()

with open('aspiration.txt', 'r') as f:
    content = f.read()
    print(content)

with open('aspiration.txt', 'r') as file:
    line1 = file.readline()
    line2 = file.readline()
    print("Line 1:", line1)
    print("Line 2:", line2)

with open('aspiration.txt', 'r') as file:
    lines = file.readlines()
    for line in lines:
        print(line)

try:
    with open('example.txt', 'r') as file:
        content = file.read()
        print(content)
except FileNotFoundError:
    print("The file 'example.txt' does not exist.")
except Exception as e:
    print(f"An error occurred: {str(e)}")

'''The with statement in Python is used in conjunction with the open() function when working with files, particularly when reading from or writing to files. The with statement provides a way to ensure that the file is properly opened and closed, which has several advantages:

Automatic Resource Management: When you use the with statement along with open(), it automatically takes care of opening the file and, most importantly, closing it when you are done. This is crucial because failing to close a file properly can lead to resource leaks and potentially cause issues, especially if your program opens many files over its lifetime.

Exception Handling: The with statement also handles exceptions gracefully. If an error occurs while working with the file (e.g., a file not found or permission issue), the with statement will still ensure that the file is properly closed, even if an exception is raised. This prevents any potential data corruption or loss due to incomplete file operations.'''

'''write(): The write() function in Python is used to write a single string or a sequence of characters to a file.

writelines(): The writelines() function in Python is used to write a list of strings to a file, with each string being written as a separate line in the file.'''

with open('example.txt', 'w') as file:
    file.write('Hello, world!')


lines = ['Line 1', 'Line 2', 'Line 3']

with open('example.txt', 'w') as file:
    file.writelines(lines)

